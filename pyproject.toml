[build-system]
requires = ["scikit-build-core"]
build-backend = "scikit_build_core.build"

[project]
authors = [
  {email = 'mathieu.scheltienne@fcbg.ch', name = 'Mathieu Scheltienne'},
]
classifiers = [
  'License :: OSI Approved :: MIT License',
  'Natural Language :: English',
  'Operating System :: MacOS',
  'Operating System :: Microsoft :: Windows',
  'Operating System :: Unix',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
  'Programming Language :: Python :: 3.9',
]
dependencies = [
  'click',
  'numpy>=1.21,<3',
  'packaging',
  'psutil',
]
description = 'Python package to handle I/O with the CNT format from ANT Neuro. '
keywords = [
  'python',
  'eeg',
  'ant neuro',
  'eego',
  'cnt',
]
license = {file = 'LICENSE'}
maintainers = [
  {email = 'mathieu.scheltienne@fcbg.ch', name = 'Mathieu Scheltienne'},
]
name = 'antio'
readme = 'README.md'
requires-python = '>=3.9'
version = '0.1.0'

[project.optional-dependencies]
all = [
  'antio[build]',
  'antio[mne]',
  'antio[style]',
  'antio[test]',
]
build = [
  'scikit-build-core',
  'twine',
]
full = [
  'antio[all]',
]
mne = [
  'mne',
]
style = [
  'codespell[toml]>=2.2.4',
  'isort',
  'pydocstyle[toml]',
  'ruff>=0.1.8',
  'toml-sort',
  'yamllint',
]
test = [
  'pytest-cov',
  'pytest>=8.0',
]

[project.scripts]
antio = 'antio.commands.main:run'

[project.urls]
documentation = 'https://github.com/mscheltienne/antio'
homepage = 'https://github.com/mscheltienne/antio'
source = 'https://github.com/mscheltienne/antio'
tracker = 'https://github.com/mscheltienne/antio/issues'

[tool.cibuildwheel]
test-command = "pytest tests --cov=src/antio --cov-report=xml --cov-config=pyproject.toml"
test-extras = ["mne", "test"]

[tool.codespell]
check-filenames = true
check-hidden = true
ignore-words = '.codespellignore'
skip = 'build,.git,.mypy_cache,.pytest_cache,.venv'

[tool.coverage.report]
exclude_lines = [
  'if __name__ == .__main__.:',
  'if TYPE_CHECKING:',
  'pragma: no cover',
]
precision = 2

[tool.coverage.run]
branch = true
cover_pylib = false
omit = [
  '**/__init__.py',
  '**/conftest.py',
  '**/antio/_version.py',
  '**/antio/utils/_fixes.py',
]

[tool.isort]
extend_skip_glob = []
line_length = 88
multi_line_output = 3
profile = 'black'
py_version = 39

[tool.pydocstyle]
add_ignore = 'D100,D104,D107'
convention = 'numpy'
ignore-decorators = '(copy_doc|property|.*setter|.*getter|pyqtSlot|Slot)'
match = '^(?!__init__|test_).*\.py'
match-dir = '^.*antio.*'

[tool.pytest.ini_options]
addopts = ['--color=yes', '--cov-report=', '--durations=20', '--junit-xml=junit-results.xml', '--strict-config', '--tb=short', '-ra', '-v']
filterwarnings = [
  "error",
]
junit_family = 'xunit2'
minversion = '8.0'

[tool.ruff]
extend-exclude = []
line-length = 88

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
ignore = []
select = ['A', 'B', 'E', 'F', 'G', 'LOG', 'NPY', 'PIE', 'PT', 'T20', 'UP', 'W']

[tool.ruff.lint.per-file-ignores]
'*' = [
  'B904', # 'Within an except clause, raise exceptions with raise ... from ...'
  'UP007', # 'Use `X | Y` for type annotations', requires python 3.10
]
'*.pyi' = ['E501']
'__init__.py' = ['F401']

[tool.scikit-build]
cmake.source-dir = "src/libeep"
sdist.cmake = false
wheel.expand-macos-universal-tags = true
wheel.license-files = ["LICENSE"]

[tool.tomlsort]
all = true
ignore_case = true
trailing_comma_inline_array = true

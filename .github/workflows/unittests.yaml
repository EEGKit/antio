name: unittests
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true
on:  # yamllint disable-line rule:truthy
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * 1'

jobs:
  build-linux:
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
    name: build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: libeep
          path: src
      - name: Build
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release ./src
          cmake --build . --config Release
          mv python/v3/pyeep.so ./pyeep.so
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: |
            ./libEep.so
            ./pyeep.so

  build-windows:
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [windows]
    name: build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: libeep
          path: src
      - name: Build
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release ./src
          cmake --build . --config Release
          mv ./Release/Eep.dll ./Eep.dll
          mv ./python/v3/Release/pyeep.pyd ./pyeep.pyd
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: |
            ./Eep.dll
            ./pyeep.pyd

  build-macos-arm64:
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [macos]
    name: build ${{ matrix.os }}-arm64
    runs-on: ${{ matrix.os }}-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: libeep
          path: src
      - name: Build
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release ./src
          cmake --build . --config Release
          mv ./python/v3/pyeep.so ./pyeep.so
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: |
            ./libEep.dylib
            ./pyeep.so

  build-macos-intel:
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [macos]
    name: build ${{ matrix.os }}-intel
    runs-on: ${{ matrix.os }}-12
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: libeep
          path: src
      - name: Build
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release ./src
          cmake --build . --config Release
          mv ./python/v3/pyeep.so ./pyeep.so
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-intel
          path: |
            ./libEep.dylib
            ./pyeep.so

  build-wheel:
    needs: [build-linux, build-windows, build-macos-arm64]
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows, macos]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    name: build-wheel ${{ matrix.os }} - py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download libeep
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: ./antio/libeep/
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv and package
        run: |
          python -m pip install --quiet uv
          uv pip install --quiet --system build
      - name: Build wheel
        run: python -m build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl

  pytest:
    needs: build-wheel
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows, macos]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    name: pytest ${{ matrix.os }} - py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv and package
        run: |
          python -m pip install --quiet uv
          uv pip install --quiet --system dist/*.whl[test]
      - name: Display system information
        run: antio sys-info --developer
      - name: Run pytest
        run: pytest antio --cov=antio --cov-report=xml --cov-config=pyproject.toml
      - name: Upload to codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests  # optional
          name: codecov-umbrella  # optional
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true  # optional (default = false)

  build-wheel-macos-intel:
    needs: build-macos-intel
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [macos]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    name: build-wheel ${{ matrix.os }}-intel - py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-12
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download libeep
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: ./antio/libeep/
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv and package
        run: |
          python -m pip install --quiet uv
          uv pip install --quiet --system build
      - name: Build wheel
        run: python -m build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-intel-py${{ matrix.python-version }}
          path: dist/*.whl

  pytest-macos-intel:
    needs: build-wheel-macos-intel
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [macos]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    name: pytest ${{ matrix.os }} - py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-12
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-intel-py${{ matrix.python-version }}
          path: dist/
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv and package
        run: |
          python -m pip install --quiet uv
          uv pip install --quiet --system dist/*.whl[test]
      - name: Display system information
        run: antio sys-info --developer
      - name: Run pytest
        run: pytest antio --cov=antio --cov-report=xml --cov-config=pyproject.toml
      - name: Upload to codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests  # optional
          name: codecov-umbrella  # optional
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true  # optional (default = false)
